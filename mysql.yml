#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: mysql-deployment
#  labels:
#    app: mysql
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      app: mysql
#  template:
#    metadata:
#      labels:
#        app: mysql
#    spec:
#      containers:
#        - name: mysql
#          image: mysql:5.0
#          ports:
#            - containerPort: 27017
#          env:
#            - name: MONGO_INITDB_ROOT_USERNAME
#              valueFrom:
#                secretKeyRef:
#                  name: mysql-secret
#                  key: mysql-user
#            - name: MONGO_INITDB_ROOT_PASSWORD
#              valueFrom:
#                secretKeyRef:
#                  name: mysql-secret
#                  key: mysql-password
#---
#apiVersion: v1
#kind: Service
#metadata:
#  name: mysql-service
#spec:
#  selector:
#    app: mysql
#  ports:
#    - protocol: TCP
#      port: 27017
#      targetPort: 27017

#  mysql> CREATE USER 'root'@'10.244.0.41' IDENTIFIED BY 'nitish@123';
#  Query OK, 0 rows affected (0.04 sec)
#
#  mysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'10.244.0.41' WITH GRANT OPTION;
#  Query OK, 0 rows affected (0.01 sec)


# Define a 'Persistent Voulume Claim'(PVC) for Mysql Storage, dynamically provisioned by cluster
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim # name of PVC essential for identifying the storage data
  labels:
    app: mysql
    tier: database
spec:
  accessModes:
    - ReadWriteOnce   #This specifies the mode of the claim that we are trying to create.
  resources:
    requests:
      storage: 1Gi    #This will tell kubernetes about the amount of space we are trying to claim.
---
# Configure 'Deployment' of mysql server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app: mysql
    tier: database
spec:
  selector: # mysql Pod Should contain same labels
    matchLabels:
      app: mysql
      tier: database
  strategy:
    type: Recreate
  template:
    metadata:
      labels: # Must match 'Service' and 'Deployment' selectors
        app: mysql
        tier: database
    spec:
      initContainers:
        - name: init-mysql #For a new MySQL deployment, you might want to ensure the database initializes correctly within the pod. You can do this by running an init container or by manually ensuring the data directory is empty before starting the main MySQL container.
          image: mysql:8.4.0
          command: [ "sh", "-c", "rm -rf /var/lib/mysql/* && mysqld --initialize-insecure --user=mysql" ]
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      containers:
        - image: mysql:8.4.0 # image from docker-hub
#          args:
#            - "--ignore-db-dir=lost+found" # Workaround for https://github.com/docker-library/mysql/issues/186
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom :
                secretKeyRef :
                  name : mysql-secrets
                  key :  password

            - name: MYSQL_DATABASE # Setting Database Name from a 'ConfigMap'
              valueFrom :
                configMapKeyRef :
                  name : db-config
                  key :  dbName


          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:        # Mounting voulume obtained from Persistent Volume Claim
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql #This is the path in the container on which the mounting will take place.
      volumes:
        - name: mysql-persistent-storage # Obtaining 'vloume' from PVC
          persistentVolumeClaim:
            claimName: mysql-pv-claim
---
# Define a 'Service' To Expose mysql to Other Services
apiVersion: v1
kind: Service
metadata:
  name: mysql  # DNS name
  labels:
    app: mysql
    tier: database
spec:
  ports:
    - port: 3306
      targetPort: 3306
  selector:       # mysql Pod Should contain same labels
    app: mysql
    tier: database
  clusterIP: None  # We Use DNS, Thus ClusterIP is not relevant